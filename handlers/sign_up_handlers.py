from aiogram import types
from loguru import logger  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é loguru

from keyboards.user_keyboards import appointment_selection_keypad
from system.dispatcher import bot
from system.dispatcher import dp  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# conn = sqlite3.connect('your_database.db')
# cursor = conn.cursor()
# cursor.execute('''CREATE TABLE IF NOT EXISTS orders (id INTEGER PRIMARY KEY AUTOINCREMENT, surname TEXT, name TEXT, phone TEXT)''')


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
# class MakingAnOrder(StatesGroup):
#     write_name = State()  # –ò–º—è
#     write_surname = State()  # –§–∞–º–∏–ª–∏—è
#
#
# class YourState(StatesGroup):
#     phone_input = State()  # –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞


@dp.callback_query_handler(lambda c: c.data == "sign_up")
async def sign_up_handler(callback_query: types.CallbackQuery):
    """–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"""
    try:
        sing_text = "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ!"
        appointment_selection_key = appointment_selection_keypad()
        await bot.send_message(callback_query.from_user.id, sing_text,
                               reply_markup=appointment_selection_key,
                               parse_mode=types.ParseMode.HTML,
                               disable_web_page_preview=True)
    except Exception as error:
        logger.exception(error)


# @dp.callback_query_handler(lambda c: c.data == "agree")
# async def agree_handler(callback_query: types.CallbackQuery, state: FSMContext):
#     """–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"""
#     await state.reset_state()
#     greeting_message = "–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É —Ñ–∞–º–∏–ª–∏—é (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π)!\n"
#     await bot.send_message(callback_query.from_user.id, greeting_message)
#     await MakingAnOrder.write_surname.set()
#
#
# @dp.message_handler(state=MakingAnOrder.write_surname)
# async def write_surname_handler(message: types.Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏"""
#     surname = message.text
#     print(f"–§–∞–º–∏–ª–∏—è: {surname}")
#     await state.update_data(surname=surname)
#     await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π)")
#     await MakingAnOrder.write_name.set()
#
#
# @dp.message_handler(state=MakingAnOrder.write_name)
# async def write_name_handler(message: types.Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
#     user_id = message.from_user.id
#     surname = (await state.get_data())['surname']
#     name = message.text
#     text_mes = (f"–†–∞–¥—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è {name} {surname}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,\n"
#                 "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –≤—Å–µ –ª–∏ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã!\n"
#                 f"–í–∞—à–µ –∏–º—è: {name}\n"
#                 f"–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è: {surname}\n"
#                 "–í—Å–µ –≤–µ—Ä–Ω–æ?")
#     confirmation_keyboards = confirmation_keypad()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –í–µ—Ä–Ω–æ –Ω–µ –í–µ—Ä–Ω–æ
#     await bot.send_message(user_id, text_mes, reply_markup=confirmation_keyboards)
#
#
# @dp.callback_query_handler(lambda c: c.data == "faithfully")
# async def handle_faithfully(callback_query: types.CallbackQuery, state: FSMContext):
#     """–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ"""
#     try:
#         # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSMContext
#         async with state.proxy() as data:
#             surname = data['surname']
#             name = data['name']
#
#         # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#         conn = sqlite3.connect('your_database.db')
#         cursor = conn.cursor()
#         cursor.execute("INSERT INTO orders (surname, name, phone) VALUES (?, ?, ?)", (surname, name, None))
#         conn.commit()
#         conn.close()
#
#         sign_up_texts: str = "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –í—ã –º–æ–∂–µ—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ!"
#         appointment_selection_key = appointment_selection_keypad()
#         await bot.send_message(callback_query.from_user.id, sign_up_texts,
#                                reply_markup=appointment_selection_key,
#                                parse_mode=types.ParseMode.HTML,
#                                disable_web_page_preview=True)
#     except Exception as error:
#         logger.exception(error)
#
#
# @dp.callback_query_handler(lambda c: c.data == "—Åall_key")
# async def call_handler(callback_query: types.CallbackQuery):
#     """–ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É"""
#     try:
#         sign_up_texts = ("–î–ª—è —Å–≤—è–∑–∏ —Å call-—Ü–µ–Ω—Ç—Ä–æ–º –∫–ª–∏–Ω–∏–∫–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä: 8 (800) 550-98-17\n\n"
#                          "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /start")
#         await bot.send_message(callback_query.from_user.id, sign_up_texts,
#                                parse_mode=types.ParseMode.HTML,
#                                disable_web_page_preview=True)
#     except Exception as error:
#         logger.exception(error)
#
#
# @dp.callback_query_handler(lambda c: c.data == "callback_key")
# async def call_handler(callback_query: types.CallbackQuery):
#     """–ó–∞–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫"""
#     try:
#         sign_up_texts = ("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ "
#                          "–≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é\n\n"
#                          "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /start")
#         markup = contact_keyboard()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
#         await bot.send_message(callback_query.from_user.id, sign_up_texts,
#                                parse_mode=types.ParseMode.HTML,
#                                reply_markup=markup,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#                                disable_web_page_preview=True)
#
#     except Exception as error:
#         logger.exception(error)
#
#
# @dp.message_handler(content_types=types.ContentType.CONTACT, state="*")
# async def handle_contact(message: types.Message):
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –º–µ—Ç–æ–¥–æ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç'
#     """
#     try:
#         markup = types.ReplyKeyboardRemove(selective=False)  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#         await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
#                              reply_markup=markup)
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
#         admin_user_id = 535185511  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
#         await bot.send_message(admin_user_id,
#                                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –∑–∞–∫–∞–∑–∞–ª –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫: {message.contact.phone_number}")
#
#     except Exception as error:
#         logger.exception(error)
#
#
# @dp.message_handler(lambda message: message.text == "üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", state="*")
# async def manual_input_phone_handler(message: types.Message):
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +1234567890")
#     # Set the state to capture the phone number input
#     await YourState.phone_input.set()
#
#
# @dp.message_handler(lambda message: message.text.startswith("+"), state=YourState.phone_input)
# async def handle_manual_phone_input(message: types.Message, state: FSMContext):
#     try:
#         phone_number = message.text
#         markup = types.ReplyKeyboardRemove(selective=False)  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#         await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
#                              reply_markup=markup)
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
#         admin_user_id = 535185511  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
#         await bot.send_message(admin_user_id,
#                                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –∑–∞–∫–∞–∑–∞–ª –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫: {phone_number}")
#     except Exception as error:
#         logger.exception(error)





# @dp.callback_query_handler(lambda c: c.data == "confirm")
# async def call_handler(callback_query: types.CallbackQuery):
#     sign_up_text = ("–î–ª—è —Å–≤—è–∑–∏ —Å call-—Ü–µ–Ω—Ç—Ä–æ–º –∫–ª–∏–Ω–∏–∫–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä: 8 (800) 550-98-17\n\n"
#                     "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /start")
#     await bot.send_message(callback_query.from_user.id, sign_up_text,
#                            parse_mode=ParseMode.HTML,
#                            disable_web_page_preview=True)












def register_callback_query_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è'"""
    dp.register_message_handler(sign_up_handler)
    # dp.register_message_handler(agree_handler)
    # dp.register_message_handler(handle_contact)
    # dp.register_message_handler(call_handler)
    # dp.register_message_handler(continue_recording)
