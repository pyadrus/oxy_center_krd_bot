from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ParseMode

from keyboards.user_keyboards import create_sign_up_keyboard, create_data_modification_keyboard, \
    create_contact_keyboard
from messages.user_messages import sign_up_text
from services.database import update_name_in_db, update_surname_in_db, update_city_in_db, get_user_data_from_db, \
    update_phone_in_db, insert_user_data_to_database
from system.dispatcher import dp, bot


class MakingAnOrder(StatesGroup):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    write_name = State()  # –ò–º—è
    write_surname = State()  # –§–∞–º–∏–ª–∏—è
    phone_input = State()  # –ü–µ—Ä–µ–¥–∞—á–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π
    write_city = State()  # –ó–∞–ø–∏—Å—å –≥–æ—Ä–æ–¥–∞


class ChangingData(StatesGroup):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π, –¥–ª—è —Å–º–µ–Ω—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    changing_name = State()  # –ò–º—è
    changing_surname = State()  # –§–∞–º–∏–ª–∏—è
    changing_phone = State()  # –ü–µ—Ä–µ–¥–∞—á–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π
    changing_city = State()  # –ó–∞–ø–∏—Å—å –≥–æ—Ä–æ–¥–∞


@dp.callback_query_handler(lambda c: c.data == "my_details")
async def call_us_handler(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user_data_from_db(user_id)  # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    if user_data:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–æ–±—Ä–∞–∑–∏—Ç–µ –∏—Ö
        name = user_data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        surname = user_data.get('surname', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        city = user_data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        phone_number = user_data.get('phone_number', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        registration_date = user_data.get('registration_date')

        text_mes = (f"ü§ù –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name} {surname}!\n"
                    "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
                    f"‚úÖ <b>–ò–º—è:</b> {name}\n"
                    f"‚úÖ <b>–§–∞–º–∏–ª–∏—è:</b> {surname}\n"
                    f"‚úÖ <b>–ì–æ—Ä–æ–¥:</b> {city}\n"
                    f"‚úÖ <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {phone_number}\n"
                    f"‚úÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {registration_date}\n\n")
        edit_data_keyboard = create_data_modification_keyboard()
        await bot.send_message(callback_query.from_user.id, text_mes,
                               reply_markup=edit_data_keyboard,
                               parse_mode=ParseMode.HTML)
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        keyboards_sign_up = create_sign_up_keyboard()
        await bot.send_message(callback_query.from_user.id, sign_up_text,
                               reply_markup=keyboards_sign_up,
                               parse_mode=ParseMode.HTML,
                               disable_web_page_preview=True)


@dp.callback_query_handler(lambda c: c.data == "edit_name")
async def edit_name_handler(callback_query: types.CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∏ –≤–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    await ChangingData.changing_name.set()


@dp.message_handler(state=ChangingData.changing_name)
async def process_entered_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = message.from_user.id
        new_name = message.text
        if update_name_in_db(user_id, new_name):
            text_name = f"‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_name} ‚úÖ\n\n" \
                        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
            await bot.send_message(user_id, text_name)
        else:
            text_name = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ ‚ùå\n\n" \
                        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
            await bot.send_message(user_id, text_name)
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
        await state.finish()


@dp.callback_query_handler(lambda c: c.data == "edit_surname")
async def edit_surname_handler(callback_query: types.CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∏ –≤–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é:")
    await ChangingData.changing_surname.set()


@dp.message_handler(state=ChangingData.changing_surname)
async def process_entered_edit_surname(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = message.from_user.id
        new_surname = message.text
        if update_surname_in_db(user_id, new_surname):
            text_surname = f"‚úÖ –§–∞–º–∏–ª–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_surname} ‚úÖ\n\n" \
                           "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
            await bot.send_message(user_id, text_surname)
        else:
            text_surname = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–º–∏–ª–∏–∏ ‚ùå\n\n" \
                           "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
            await bot.send_message(user_id, text_surname)
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
        await state.finish()


@dp.callback_query_handler(lambda c: c.data == "edit_city")
async def edit_city_handler(callback_query: types.CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∏ –≤–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:")
    await ChangingData.changing_city.set()


@dp.message_handler(state=ChangingData.changing_city)
async def process_entered_edit_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = message.from_user.id
        new_city = message.text
        if update_city_in_db(user_id, new_city):
            text_city = f"‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_city} ‚úÖ\n\n" \
                        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
            await bot.send_message(user_id, text_city)
        else:
            text_city = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ ‚ùå\n\n" \
                        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
            await bot.send_message(user_id, text_city)
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
        await state.finish()


@dp.callback_query_handler(lambda c: c.data == "edit_phone")
async def edit_city_handler(callback_query: types.CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∏ –≤–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await ChangingData.changing_phone.set()


@dp.message_handler(state=ChangingData.changing_phone)
async def process_entered_edit_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = message.from_user.id
        new_phone = message.text
        if update_phone_in_db(user_id, new_phone):
            text_phone = f"‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_phone} ‚úÖ\n\n" \
                         "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
            await bot.send_message(user_id, text_phone)
        else:
            text_phone = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚ùå\n\n" \
                         "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
            await bot.send_message(user_id, text_phone)
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
        await state.finish()


@dp.callback_query_handler(lambda c: c.data == "agree")
async def agree_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    await MakingAnOrder.write_surname.set()
    text_mes = ("üë• –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π):\n"
                "–ü—Ä–∏–º–µ—Ä: –ü–µ—Ç—Ä–æ–≤, –ò–≤–∞–Ω–æ–≤–∞, –°–∏–¥–æ—Ä–µ–Ω–∫–æ")
    await bot.send_message(callback_query.from_user.id, text_mes)


@dp.message_handler(state=MakingAnOrder.write_surname)
async def write_surname_handler(message: types.Message, state: FSMContext):
    surname = message.text
    await state.update_data(surname=surname)
    await MakingAnOrder.write_name.set()
    text_mes = ("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π):\n"
                "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω, –û–ª—å–≥–∞, –ê–Ω–∞—Å—Ç–∞—Å–∏—è")
    await bot.send_message(message.from_user.id, text_mes)


@dp.message_handler(state=MakingAnOrder.write_name)
async def write_city_handlers(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    await MakingAnOrder.write_city.set()
    text_mes = ("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π):\n"
                "–ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
    await bot.send_message(message.from_user.id, text_mes)


@dp.message_handler(state=MakingAnOrder.write_city)
async def write_name_handler(message: types.Message, state: FSMContext):
    city = message.text
    await state.update_data(city=city)
    sign_up_texts = (
        "–î–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.\n\n"
        "–ß—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ.")
    contact_keyboard = create_contact_keyboard()
    await bot.send_message(message.from_user.id, sign_up_texts,
                           reply_markup=contact_keyboard,  # Set the custom keyboard
                           parse_mode=types.ParseMode.HTML,
                           disable_web_page_preview=True)
    await MakingAnOrder.phone_input.set()


@dp.message_handler(content_types=types.ContentType.CONTACT, state=MakingAnOrder.phone_input)
async def handle_contact(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await state.update_data(phone_number=phone_number)
    await handle_confirmation(message, state)


@dp.message_handler(lambda message: message.text and not message.contact, state=MakingAnOrder.phone_input)
async def handle_phone_text(message: types.Message, state: FSMContext):
    phone_number = message.text
    await state.update_data(phone_number=phone_number)
    await handle_confirmation(message, state)


async def handle_confirmation(message: types.Message, state: FSMContext):
    markup = types.ReplyKeyboardRemove(selective=False)  # Remove the keyboard
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", reply_markup=markup)
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    surname = user_data.get('surname', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    name = user_data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    phone_number = user_data.get('phone_number', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    city = user_data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    registration_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram
    user_id = message.from_user.id
    # –°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text_mes = (f"ü§ù –†–∞–¥—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è {name} {surname}! ü§ù\n"
                "–í–∞—à–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
                f"‚úÖ <b>–í–∞—à–µ –ò–º—è:</b> {name}\n"
                f"‚úÖ <b>–í–∞—à–∞ –§–∞–º–∏–ª–∏—è:</b> {surname}\n"
                f"‚úÖ <b>–í–∞—à –ì–æ—Ä–æ–¥:</b> {city}\n"
                f"‚úÖ <b>–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {phone_number}\n"
                f"‚úÖ <b>–í–∞—à–∞ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {registration_date}\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –º–µ–Ω—é \"–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ\".\n\n"
                "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
    insert_user_data_to_database(user_id, name, surname, city, phone_number, registration_date)
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.reset_state()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é my_details() (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    await bot.send_message(message.from_user.id, text_mes)


def register_my_details_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è'"""
    dp.register_message_handler(call_us_handler)
    dp.register_message_handler(edit_name_handler)
