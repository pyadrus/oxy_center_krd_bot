import sqlite3

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ParseMode, ReplyKeyboardMarkup, KeyboardButton

from keyboards.user_keyboards import sign_up_keyboards
from messages.user_messages import sign_up_text
from services.database import writing_to_the_database
from system.dispatcher import dp, bot
from datetime import datetime


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def create_table_if_not_exists():
    conn = sqlite3.connect("your_database.db")  # –ó–∞–º–µ–Ω–∏—Ç–µ "your_database.db" –Ω–∞ –∏–º—è –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            name TEXT,
            surname TEXT,
            city TEXT,
            phone_number TEXT,
            registration_date TEXT
        )
    ''')
    conn.commit()
    conn.close()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class MakingAnOrder(StatesGroup):
    write_name = State()  # –ò–º—è
    write_surname = State()  # –§–∞–º–∏–ª–∏—è
    phone_input = State()  # –ü–µ—Ä–µ–¥–∞—á–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π
    write_city = State()  # –ó–∞–ø–∏—Å—å –≥–æ—Ä–æ–¥–∞


@dp.callback_query_handler(lambda c: c.data == "my_details")
async def call_us_handler(callback_query: types.CallbackQuery):
    keyboards_sign_up = sign_up_keyboards()
    await bot.send_message(callback_query.from_user.id, sign_up_text,
                           reply_markup=keyboards_sign_up,
                           parse_mode=ParseMode.HTML,
                           disable_web_page_preview=True)


@dp.callback_query_handler(lambda c: c.data == "agree")
async def agree_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    await MakingAnOrder.write_surname.set()
    text_mes = (f"üë• –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π):\n"
                "–ü—Ä–∏–º–µ—Ä: –ü–µ—Ç—Ä–æ–≤, –ò–≤–∞–Ω–æ–≤–∞, –°–∏–¥–æ—Ä–µ–Ω–∫–æ")
    await bot.send_message(callback_query.from_user.id, text_mes)


@dp.message_handler(state=MakingAnOrder.write_surname)
async def write_surname_handler(message: types.Message, state: FSMContext):
    surname = message.text
    await state.update_data(surname=surname)
    await MakingAnOrder.write_name.set()
    text_mes = (f"üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π):\n"
                "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω, –û–ª—å–≥–∞, –ê–Ω–∞—Å—Ç–∞—Å–∏—è")
    await bot.send_message(message.from_user.id, text_mes)


@dp.message_handler(state=MakingAnOrder.write_name)
async def write_city_handlers(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    await MakingAnOrder.write_city.set()
    text_mes = (f"üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π):\n"
                "–ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
    await bot.send_message(message.from_user.id, text_mes)


@dp.message_handler(state=MakingAnOrder.write_city)
async def write_name_handler(message: types.Message, state: FSMContext):
    city = message.text
    await state.update_data(name=city)
    sign_up_texts = (
        "–î–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.\n\n"
        "–ß—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ.")
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    # –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    send_contact_button = KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å", request_contact=True)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    markup.add(send_contact_button)
    await bot.send_message(message.from_user.id, sign_up_texts,
                           reply_markup=markup,  # Set the custom keyboard
                           parse_mode=types.ParseMode.HTML,
                           disable_web_page_preview=True)
    await MakingAnOrder.phone_input.set()


@dp.message_handler(content_types=types.ContentType.CONTACT, state=MakingAnOrder.phone_input)
async def handle_contact(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await state.update_data(phone_number=phone_number)
    await handle_confirmation(message, state)


@dp.message_handler(lambda message: message.text and not message.contact, state=MakingAnOrder.phone_input)
async def handle_phone_text(message: types.Message, state: FSMContext):
    phone_number = message.text
    await state.update_data(phone_number=phone_number)
    await handle_confirmation(message, state)


async def handle_confirmation(message: types.Message, state: FSMContext):
    markup = types.ReplyKeyboardRemove(selective=False)  # Remove the keyboard
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", reply_markup=markup)
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    surname = user_data.get('surname', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    name = user_data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    phone_number = user_data.get('phone_number', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    city = user_data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    registration_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    # –°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text_mes = (f"ü§ù –†–∞–¥—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è {name} {surname}! ü§ù\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –≤—Å–µ –ª–∏ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã:\n\n"
                f"‚úÖ <b>–í–∞—à–µ –ò–º—è:</b> {name}\n"
                f"‚úÖ <b>–í–∞—à–∞ –§–∞–º–∏–ª–∏—è:</b> {surname}\n"
                f"‚úÖ <b>–í–∞—à –ì–æ—Ä–æ–¥:</b> {city}\n"
                f"‚úÖ <b>–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {phone_number}\n"
                f"‚úÖ <b>–í–∞—à–∞ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {registration_date}\n\n"
                "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤–µ—Ä–Ω—ã, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å–µ–≥–¥–∞ –∏–∑–º–µ–Ω–∏—Ç—å.\n\n"
                "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("your_database.db")  # –ó–∞–º–µ–Ω–∏—Ç–µ "your_database.db" –Ω–∞ –∏–º—è –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor = conn.cursor()
    cursor.execute("INSERT INTO users (name, surname, city, phone_number, registration_date) VALUES (?, ?, ?, ?, ?)",
                   (name, surname, city, phone_number, registration_date))
    conn.commit()
    conn.close()

    await bot.send_message(message.from_user.id, text_mes)


def register_my_detalist_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è'"""
    dp.register_message_handler(call_us_handler)
