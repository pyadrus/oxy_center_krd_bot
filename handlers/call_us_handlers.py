from aiogram import types
# from aiogram.dispatcher import FSMContext
# from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ParseMode, ReplyKeyboardMarkup, KeyboardButton

from keyboards.user_keyboards import sign_up_keyboards
from messages.user_messages import sign_up_text
# from services.database import writing_to_the_database
from system.dispatcher import dp, bot


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
# class MakingAnOrder(StatesGroup):
#     write_name = State()  # –ò–º—è
#     write_surname = State()  # –§–∞–º–∏–ª–∏—è
#     phone_input = State()  # –ü–µ—Ä–µ–¥–∞—á–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π


@dp.callback_query_handler(lambda c: c.data == "call_us")
async def call_us_handler(callback_query: types.CallbackQuery):
    keyboards_sign_up = sign_up_keyboards()
    await bot.send_message(callback_query.from_user.id, sign_up_text,
                           reply_markup=keyboards_sign_up,
                           parse_mode=ParseMode.HTML,
                           disable_web_page_preview=True)


# @dp.callback_query_handler(lambda c: c.data == "agree")
# async def agree_handler(callback_query: types.CallbackQuery, state: FSMContext):
#
#     await state.reset_state()
#     await MakingAnOrder.write_surname.set()
#     await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –§–∞–º–∏–ª–∏—é (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π)!")
#
#
# @dp.message_handler(state=MakingAnOrder.write_surname)
# async def write_surname_handler(message: types.Message, state: FSMContext):
#     surname = message.text
#     await state.update_data(surname=surname)
#     await MakingAnOrder.write_name.set()
#     await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –ò–º—è (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π)")
#
#
# @dp.message_handler(state=MakingAnOrder.write_name)
# async def write_name_handler(message: types.Message, state: FSMContext):
#     name = message.text
#     await state.update_data(name=name)
#     # await MakingAnOrder.phone_input.set()
#     sign_up_texts = "–î–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ\n\n"
#     markup = ReplyKeyboardMarkup(resize_keyboard=True)
#     # –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
#     send_contact_button = KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å", request_contact=True)
#     # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
#     markup.add(send_contact_button)
#     await bot.send_message(message.from_user.id, sign_up_texts,
#                            reply_markup=markup,  # Set the custom keyboard
#                            parse_mode=types.ParseMode.HTML,
#                            disable_web_page_preview=True)
#     await MakingAnOrder.phone_input.set()
#
#
# @dp.message_handler(content_types=types.ContentType.CONTACT, state=MakingAnOrder.phone_input)
# async def handle_contact(message: types.Message, state: FSMContext):
#     phone_number = message.contact.phone_number
#     await state.update_data(phone_number=phone_number)
#     await handle_confirmation(message, state)
#
#
# @dp.message_handler(lambda message: message.text and not message.contact, state=MakingAnOrder.phone_input)
# async def handle_phone_text(message: types.Message, state: FSMContext):
#     phone_number = message.text
#     await state.update_data(phone_number=phone_number)
#     await handle_confirmation(message, state)
#
#
# async def handle_confirmation(message: types.Message, state: FSMContext):
#     markup = types.ReplyKeyboardRemove(selective=False)  # Remove the keyboard
#     await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", reply_markup=markup)
#     # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
#     user_data = await state.get_data()
#     surname = user_data.get('surname', '–Ω–µ —É–∫–∞–∑–∞–Ω')
#     name = user_data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω')
#     phone_number = user_data.get('phone_number', '–Ω–µ —É–∫–∞–∑–∞–Ω')
#     # –°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#     text_mes = (f"–†–∞–¥—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è {name} {surname}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,\n"
#                 "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –≤—Å–µ –ª–∏ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã!\n"
#                 f"–í–∞—à–µ –∏–º—è: {name}\n"
#                 f"–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è: {surname}\n"
#                 f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n"
#                 "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤–µ—Ä–Ω—ã, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
#     confirmation_keyboard = types.InlineKeyboardMarkup()
#     confirmation_keyboard.add(types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="agree"))
#     writing_to_the_database(surname, name, phone_number)
#     await bot.send_message(message.from_user.id, text_mes, reply_markup=confirmation_keyboard)


def register_call_us_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è'"""
    dp.register_message_handler(call_us_handler)
    dp.register_message_handler(agree_handler)
